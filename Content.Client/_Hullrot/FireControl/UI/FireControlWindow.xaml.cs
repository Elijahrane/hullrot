using Content.Client.UserInterface.Controls;
using Content.Shared._Hullrot.FireControl;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Content.Client.Shuttles.UI;

namespace Content.Client._Hullrot.FireControl.UI;

[GenerateTypedNameReferences]
public sealed partial class FireControlWindow : FancyWindow
{
    public ShuttleNavControl Radar => NavRadar;
    public Action? OnServerRefresh;

    // fun fact: readonly dictionaries are still mutable
    public readonly Dictionary<NetEntity, Button> WeaponsList = new();

    public FireControlWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        RefreshButton.OnPressed += _ => OnServerRefresh?.Invoke();
    }

    public void UpdateStatus(FireControlConsoleBoundInterfaceState state)
    {
        NavRadar.UpdateState(state.NavState);

        if (state.Connected)
        {
            // RefreshButton.Disabled = true;
            ServerStatus.Text = Loc.GetString("fire-control-window-connected");
        }
        else
        {
            RefreshButton.Disabled = false;
            ServerStatus.Text = Loc.GetString("fire-control-window-disconnected");
        }

        WeaponsList.Clear();
        ControllablesBox.DisposeAllChildren();
        foreach (var controllable in state.FireControllables)
        {
            var button = new Button();
            button.ToggleMode = true;
            button.Text = controllable.Name;
            ControllablesBox.AddChild(button);
            WeaponsList.Add(controllable.NetEntity, button);
        }
    }
}
